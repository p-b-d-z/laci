/*
This route will be responsible for interacting with all categories.

Categories parent to fields. Each category contains 1 entry per field.
Entries contain a category GUID for each field GUID where there is an assignment.
Entries are unique per field, per category, per application. The database schema enforces this.
*/

import { NextResponse } from 'next/server';
import { getCategories, addCategory } from '@/lib/mysql/queries';
import { getFromRedisOrFetch, clearCache } from '@/lib/redis/functions';
import { Category } from '@/types';
import { CATEGORIES_CACHE_KEY, ONE_WEEK_TTL } from '@/constants';
import serverLogger from '@/lib/logging/server';
import { getServerSession } from 'next-auth/next';
import { authOptions } from '@/lib/auth/providers';
import { getUserByEmail, insertAuditLog } from '@/lib/mysql/queries';

export async function GET() {
	try {
		const categories = await getFromRedisOrFetch<Category[]>(CATEGORIES_CACHE_KEY, getCategories, ONE_WEEK_TTL);

		return NextResponse.json(categories);
	} catch (error) {
		serverLogger.error('Error fetching categories:', error);
		return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });
	}
}

export async function PUT(request: Request) {
	try {
		const session = await getServerSession(authOptions);
		if (!session || !session.user || !session.user.email) {
			return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
		}

		const user = await getUserByEmail(session.user.email);
		if (!user) {
			return NextResponse.json({ error: 'User not found' }, { status: 404 });
		}

		const { name, order } = await request.json();

		if (!name || typeof name !== 'string') {
			return NextResponse.json({ error: 'Invalid category name' }, { status: 400 });
		}

		if (order !== undefined && (typeof order !== 'number' || order < 0)) {
			return NextResponse.json({ error: 'Invalid order provided' }, { status: 400 });
		}

		const newCategory: Category = {
			id: '', // This will be generated by MySQL
			name,
			order: order ?? 0,
			description: '',
		};

		const categoryId = await addCategory(newCategory);

		// Invalidate cache
		await clearCache(CATEGORIES_CACHE_KEY);

		// Add audit log entry
		await insertAuditLog({
			actor: user.id,
			action: 'add',
			target: 'category',
			targetId: categoryId,
			changes: newCategory,
		});
		serverLogger.info(`[ADD] Added audit log entry for creating category: ${categoryId}`);

		return NextResponse.json({ ...newCategory, id: categoryId }, { status: 201 });
	} catch (error) {
		serverLogger.error('Error creating category:', error);
		return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });
	}
}
